https://leetcode.com/problems/find-the-duplicate-number/description/

class Solution {
    public int findDuplicate(int[] nums) {
        int i = 0;
        while(i<nums.length){
            int correct = nums[i]-1;
            if(nums[i]!=nums[correct]){
                swap(nums, i, correct);
            }else{
                i++;
            }
        }
        for(int index= 0; index<=nums.length; index++){
            if(nums[index]!=index+1){
                return nums[index];
            }
        
        }
        return nums[i];
    }
    void swap(int[] nums, int first, int second){
        int temp = nums[first];
        nums[first]=nums[second];
        nums[second]=temp;
    }
}

//MORE OPTIMIZED SOLUTION
class Solution {
    public int findDuplicate(int[] nums) {
        int i = 0;
        while(i<nums.length){
            if(nums[i]!=i+1){
                int correct = nums[i]-1;
                if(nums[i]!=nums[correct]){
                swap(nums, i, correct);
                } else{
                    return nums[i];
                }
            }
            else{
                i++;
            }
        }
       
        return -1;
    }
    void swap(int[] nums, int first, int second){
        int temp = nums[first];
        nums[first]=nums[second];
        nums[second]=temp;
    }
}
